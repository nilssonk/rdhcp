use std::borrow::Borrow;

use crate::*;

#[test]
fn decode_request_old_ip() {
    let data: Vec<u8> = vec![
        0x01, 0x01, 0x06, 0x00, 0x96, 0x3a, 0xcd, 0x71, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xeb,
        0x70, 0x50, 0x2b, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63,
        0x35, 0x01, 0x03, 0x3d, 0x07, 0x01, 0x30, 0xeb, 0x70, 0x50, 0x2b, 0xb9, 0x37, 0x11, 0x01,
        0x02, 0x06, 0x0c, 0x0f, 0x1a, 0x1c, 0x79, 0x03, 0x21, 0x28, 0x29, 0x2a, 0x77, 0xf9, 0xfc,
        0x11, 0x39, 0x02, 0x02, 0x40, 0x32, 0x04, 0xc0, 0xa8, 0x00, 0x03, 0x0c, 0x0b, 0x66, 0x65,
        0x64, 0x6f, 0x72, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0xff,
    ];

    let packet = DhcpPacket::from(data.borrow());

    assert_eq!(packet.get_operation(), Ok(DhcpOperation::Request));
    assert_eq!(
        packet.get_hardware_address_type(),
        Ok(HardwareAddressType::Ethernet)
    );
    assert_eq!(packet.get_hardware_address_length(), 6);
    assert_eq!(packet.get_hops(), 0);
    assert_eq!(packet.get_xid(), 0x963acd71);
    assert_eq!(packet.get_secs(), 1);
    let flags = packet.get_flags();
    assert!(!flags.is_broadcast());
    assert!(packet.get_client_ip().is_unspecified());
    assert!(packet.get_offered_ip().is_unspecified());
    assert!(packet.get_server_ip().is_unspecified());
    assert!(packet.get_gateway_ip().is_unspecified());
    assert_eq!(
        packet.get_client_hardware_address(),
        vec![0x30, 0xeb, 0x70, 0x50, 0x2b, 0xb9]
    );
    assert!(packet.get_server_name().iter().all(|&x| x == 0));
    assert!(packet.get_boot_file().iter().all(|&x| x == 0));

    let options: Vec<DhcpOption> = packet.get_options().collect();
    assert_eq!(
        options,
        vec![
            DhcpOption::MagicCookie,
            DhcpOption::Unknown(&[53, 1, 3]),
            DhcpOption::Unknown(&[61, 7, 1, 48, 235, 112, 80, 43, 185]),
            DhcpOption::Unknown(&[
                55, 17, 1, 2, 6, 12, 15, 26, 28, 121, 3, 33, 40, 41, 42, 119, 249, 252, 17
            ]),
            DhcpOption::Unknown(&[57, 2, 2, 64]),
            DhcpOption::Unknown(&[50, 4, 192, 168, 0, 3]),
            DhcpOption::Unknown(&[12, 11, 102, 101, 100, 111, 114, 97, 116, 104, 105, 110, 107]),
            DhcpOption::End
        ]
    );
}
