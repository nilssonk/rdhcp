mod option;

#[derive(Debug, PartialEq, Eq)]
pub enum DhcpOption<'a> {
    Padding(option::Padding),
    SubnetMask(option::SubnetMask),
    TimeOffset(option::TimeOffset),
    Router(option::Router),
    TimeServer(option::TimeServer),
    NameServer(option::NameServer),
    DomainServer(option::DomainServer),
    LogServer(option::LogServer),
    QuotesServer(option::QuotesServer),
    LprServer(option::LprServer),
    ImpressServer(option::ImpressServer),
    RlpServer(option::RlpServer),
    Hostname(option::Hostname),
    BootFileSize(option::BootFileSize),
    MeritDumpFile(option::MeritDumpFile),
    DomainName(option::DomainName),
    SwapServer(option::SwapServer),
    RootPath(option::RootPath),
    ExtensionFile(option::ExtensionFile),
    ForwardingOnOff(option::ForwardingOnOff),
    SourceRoutingOnOff(option::SourceRoutingOnOff),
    PolicyFilter(option::PolicyFilter),
    MaxDatagramAssembly(option::MaxDatagramAssembly),
    DefaultIpTtl(option::DefaultIpTtl),
    MtuTimeout(option::MtuTimeout),
    MtuPlateau(option::MtuPlateau),
    MtuInterface(option::MtuInterface),
    MtuSubnet(option::MtuSubnet),
    BroadcastAddress(option::BroadcastAddress),
    MaskDiscovery(option::MaskDiscovery),
    MaskSupplier(option::MaskSupplier),
    RouterDiscovery(option::RouterDiscovery),
    RouterRequest(option::RouterRequest),
    StaticRoute(option::StaticRoute),
    TrailerEncapsulation(option::TrailerEncapsulation),
    ArpTimeout(option::ArpTimeout),
    EthernetEncapsulation(option::EthernetEncapsulation),
    DefaultTcpTtl(option::DefaultTcpTtl),
    KeepaliveTime(option::KeepaliveTime),
    KeepaliveData(option::KeepaliveData),
    NisDomain(option::NisDomain),
    NisServers(option::NisServers),
    NtpServers(option::NtpServers),
    VendorSpecificInformation(option::VendorSpecificInformation),
    NetbiosName(option::NetbiosName),
    NetbiosSDist(option::NetbiosSDist),
    NetbiosNodeType(option::NetbiosNodeType),
    NetbiosScope(option::NetbiosScope),
    XWindowFontServer(option::XWindowFontServer),
    XWindowDisplayManager(option::XWindowDisplayManager),
    RequestedIpAddress(option::RequestedIpAddress),
    IpAddressLeaseTime(option::IpAddressLeaseTime),
    Overload(option::Overload),
    DhcpMsgType(option::DhcpMsgType),
    DhcpServerId(option::DhcpServerId),
    ParameterRequestList(option::ParameterRequestList),
    DhcpErrorMessage(option::DhcpErrorMessage),
    DhcpMaxMessageSize(option::DhcpMaxMessageSize),
    DhcpRenewalTime(option::DhcpRenewalTime),
    DhcpRebindingTime(option::DhcpRebindingTime),
    ClassId(option::ClassId),
    ClientId(option::ClientId),
    NetWareIpDomain(option::NetWareIpDomain),
    NetWareIpOption(option::NetWareIpOption),
    NisDomainName(option::NisDomainName),
    NisServerAddress(option::NisServerAddress),
    TftpServerName(option::TftpServerName),
    BootFileName(option::BootFileName),
    HomeAgentAddress(option::HomeAgentAddress),
    SmtpServers(option::SmtpServers),
    Pop3Servers(option::Servers),
    NntpServers(option::NntpServers),
    WwwServers(option::WwwServers),
    FingerServers(option::FingerServers),
    IrcServers(option::IrcServers),
    StreetTalkServers(option::StreetTalkServers),
    StdaServers(option::StdaServers),
    UserClassInformation(option::UserClassInformation),
    DirectoryAgentInformation(option::DirectoryAgentInformation),
    ServiceLocationAgentScope(option::ServiceLocationAgentScope),
    RapidCommit(option::RapidCommit),
    ClientFqdn(option::ClientFqdn),
    RelayAgentInformation(option::RelayAgentInformation),
    Isns(option::Isns),
    Removed(option::Removed),
    NdsServers(option::NdsServers),
    NdsTreeName(option::NdsTreeName),
    NdsContext(option::NdsContext),
    BcmcsControllerDomainNameList(option::BcmcsControllerDomainNameList),
    BcmcsControllerIpv4Address(option::Address),
    Authentication(option::Authentication),
    ClientLastTransactionTime(option::ClientLastTransactionTime),
    AssociatedIp(option::AssociatedIp),
    ClientSystem(option::ClientSystem),
    ClientNdi(option::ClientNdi),
    Ldap(option::Ldap),
    UuidGuid(option::UuidGuid),
    OpenGroupUserAuth(option::OpenGroupUserAuth),
    GeoconfCivic(option::GeoconfCivic),
    MagicCookie(option::MagicCookie),
    PCode(option::PCode),
    TCode(option::TCode),
    Ipv6OnlyPreferred(option::OnlyPreferred),
    DhcpV4OverDhcpV6(option::DhcpV4OverDhcpV6),
    NetinfoAddress(option::NetinfoAddress),
    NetinfoTag(option::NetinfoTag),
    DhcpCaptivePortal(option::DhcpCaptivePortal),
    DhcpAutoConfiguration(option::DhcpAutoConfiguration),
    NameServiceSearch(option::NameServiceSearch),
    SubnetSelection(option::SubnetSelection),
    DomainSearchList(option::DomainSearchList),
    SipServers(option::SipServers),
    ClasslessStaticRoute(option::ClasslessStaticRoute),
    CablelabsClientConfiguration(option::CablelabsClientConfiguration),
    GeoConf(option::GeoConf),
    VendorClass(option::VendorClass),
    PxeVendorSpecific(option::PxeVendorSpecific),
    EtherbootSignature(option::EtherbootSignature),
    DocsisFullSecurityServerIpAddress(option::DocsisFullSecurityServerIpAddress),
    TftpServerIpAddress(option::TftpServerIpAddress),
    KernelOptions(option::KernelOptions),
    CallServerIpAddress(option::CallServerIpAddress),
    EthernetInterface(option::EthernetInterface),
    VendorDiscriminationString(option::VendorDiscriminationString),
    RemoteStatisticsServerIpAddress(option::RemoteStatisticsServerIpAddress),
    Ieee8021QVlanId(option::QVlanId),
    Ieee8021DLayer2Priority(option::Priority),
    DiffServCodePoint(option::DiffServCodePoint),
    HttpProxy(option::HttpProxy),
    PanaAgent(option::PanaAgent),
    V4Lost(option::V4Lost),
    CapwapAccessControllerAddresses(option::CapwapAccessControllerAddresses),
    Ipv4AddressMos(option::Ipv4AddressMos),
    Ipv4FqdnMos(option::FqdnMos),
    SipUaConfigurationServiceDomains(option::SipUaConfigurationServiceDomains),
    Ipv4AddressAndsf(option::Ipv4AddressAndsf),
    V4SztpRedirects(option::SztpRedirects),
    GeoLoc(option::GeoLoc),
    ForcerenewNonceCapable(option::ForcerenewNonceCapable),
    RdnssSelection(option::RdnssSelection),
    V4DotsRi(option::DotsRi),
    V4DotsAddress(option::DotsAddress),
    TftpServerAddress(option::TftpServerAddress),
    Etherboot(option::Etherboot),
    GrubConfigurationPathName(option::GrubConfigurationPathName),
    StatusCode(option::StatusCode),
    BaseTime(option::BaseTime),
    StartTimeOfState(option::StartTimeOfState),
    QueryStartTime(option::QueryStartTime),
    QueryEndTime(option::QueryEndTime),
    DhcpState(option::DhcpState),
    DataSource(option::DataSource),
    V4PcpServer(option::PcpServer),
    Polycom(option::Polycom),
    MudUrlV4,
    IpTelephone(option::IpTelephone),
    PacketCableAndCableHome(option::PacketCableAndCableHome),
    PxeLinuxMagic(option::PxeLinuxMagic),
    ConfigurationFile(option::ConfigurationFile),
    PathPrefix(option::PathPrefix),
    RebootTime(option::RebootTime),
    BrAddresses6rd(option::BrAddresses6rd),
    V4AccessDomain(option::AccessDomain),
    Unassigned(option::Unassigned),
    SubnetAllocation(option::SubnetAllocation),
    VirtualSubnetSelection(option::VirtualSubnetSelection),
    Reserved(option::Reserved),
    Unknown(&'a [u8]),
    End,
}

impl<'a> DhcpOption<'a> {
    #[inline]
    pub(crate) fn try_decode(data: &'a [u8]) -> Option<Self> {
        let tag = *data.get(0)?;
        let decode_fn: fn(&[u8]) -> Option<DhcpOption> = match tag {
            0 => &option::Padding::decode,
            1 => &option::SubnetMask::decode,
            2 => &option::TimeOffset::decode,
            3 => &option::Router::decode,
            4 => &option::TimeServer::decode,
            5 => &option::NameServer::decode,
            6 => &option::DomainServer::decode,
            7 => &option::LogServer::decode,
            8 => &option::QuotesServer::decode,
            9 => &option::LprServer::decode,
            10 => &option::ImpressServer::decode,
            11 => &option::RlpServer::decode,
            12 => &option::Hostname::decode,
            13 => &option::BootFileSize::decode,
            14 => &option::MeritDumpFile::decode,
            15 => &option::DomainName::decode,
            16 => &option::SwapServer::decode,
            17 => &option::RootPath::decode,
            18 => &option::ExtensionFile::decode,
            19 => &option::ForwardingOnOff::decode,
            20 => &option::SourceRoutingOnOff::decode,
            21 => &option::PolicyFilter::decode,
            22 => &option::MaxDatagramAssembly::decode,
            23 => &option::DefaultIpTtl::decode,
            24 => &option::MtuTimeout::decode,
            25 => &option::MtuPlateau::decode,
            26 => &option::MtuInterface::decode,
            27 => &option::MtuSubnet::decode,
            28 => &option::BroadcastAddress::decode,
            29 => &option::MaskDiscovery::decode,
            30 => &option::MaskSupplier::decode,
            31 => &option::RouterDiscovery::decode,
            32 => &option::RouterRequest::decode,
            33 => &option::StaticRoute::decode,
            34 => &option::TrailerEncapsulation::decode,
            35 => &option::ArpTimeout::decode,
            36 => &option::EthernetEncapsulation::decode,
            37 => &option::DefaultTcpTtl::decode,
            38 => &option::KeepaliveTime::decode,
            39 => &option::KeepaliveData::decode,
            40 => &option::NisDomain::decode,
            41 => &option::NisServers::decode,
            42 => &option::NtpServers::decode,
            43 => &option::VendorSpecificInformation::decode,
            44 => &option::NetbiosName::decode,
            45 => &option::NetbiosSDist::decode,
            46 => &option::NetbiosNodeType::decode,
            47 => &option::NetbiosScope::decode,
            48 => &option::XWindowFontServer::decode,
            49 => &option::XWindowDisplayManager::decode,
            50 => &option::RequestedIpAddress::decode,
            51 => &option::IpAddressLeaseTime::decode,
            52 => &option::Overload::decode,
            53 => &option::DhcpMsgType::decode,
            54 => &option::DhcpServerId::decode,
            55 => &option::ParameterRequestList::decode,
            56 => &option::DhcpErrorMessage::decode,
            57 => &option::DhcpMaxMessageSize::decode,
            58 => &option::DhcpRenewalTime::decode,
            59 => &option::DhcpRebindingTime::decode,
            60 => &option::ClassId::decode,
            61 => &option::ClientId::decode,
            62 => &option::NetWareIpDomain::decode,
            63 => &option::NetWareIpOption::decode,
            64 => &option::NisDomainName::decode,
            65 => &option::NisServerAddress::decode,
            66 => &option::TftpServerName::decode,
            67 => &option::BootFileName::decode,
            68 => &option::HomeAgentAddress::decode,
            69 => &option::SmtpServers::decode,
            70 => &option::Pop3Servers::decode,
            71 => &option::NntpServers::decode,
            72 => &option::WwwServers::decode,
            73 => &option::FingerServers::decode,
            74 => &option::IrcServers::decode,
            75 => &option::StreetTalkServers::decode,
            76 => &option::StdaServers::decode,
            77 => &option::UserClassInformation::decode,
            78 => &option::DirectoryAgentInformation::decode,
            79 => &option::ServiceLocationAgentScope::decode,
            80 => &option::RapidCommit::decode,
            81 => &option::ClientFqdn::decode,
            82 => &option::RelayAgentInformation::decode,
            83 => &option::Isns::decode,
            84 => &option::Removed::decode,
            85 => &option::NdsServers::decode,
            86 => &option::NdsTreeName::decode,
            87 => &option::NdsContext::decode,
            88 => &option::BcmcsControllerDomainNameList::decode,
            89 => &option::BcmcsControllerIpv4Address::decode,
            90 => &option::Authentication::decode,
            91 => &option::ClientLastTransactionTime::decode,
            92 => &option::AssociatedIp::decode,
            93 => &option::ClientSystem::decode,
            94 => &option::ClientNdi::decode,
            95 => &option::Ldap::decode,
            96 => &option::UuidGuid::decode,
            97 => &option::OpenGroupUserAuth::decode,
            98 => &option::GeoconfCivic::decode,
            99 => &option::MagicCookie::decode,
            100 => &option::PCode::decode,
            101 => &option::TCode::decode,
            102 => &option::Ipv6OnlyPreferred::decode,
            103 => &option::DhcpV4OverDhcpV6::decode,
            104 => &option::NetinfoAddress::decode,
            105 => &option::NetinfoTag::decode,
            106 => &option::DhcpCaptivePortal::decode,
            107 => &option::DhcpAutoConfiguration::decode,
            108 => &option::NameServiceSearch::decode,
            109 => &option::SubnetSelection::decode,
            110 => &option::DomainSearchList::decode,
            111 => &option::SipServers::decode,
            112 => &option::ClasslessStaticRoute::decode,
            113 => &option::CableLabsClientConfiguration::decode,
            114 => &option::GeoConf::decode,
            115 => &option::VendorClass::decode,
            116 => &option::PxeVendorSpecific::decode,
            117 => &option::EtherbootSignature::decode,
            118 => &option::DocsisFullSecurityServerIpAddress::decode,
            119 => &option::TftpServerIpAddress::decode,
            120 => &option::KernelOptions::decode,
            121 => &option::CallServerIpAddress::decode,
            122 => &option::EthernetInterface::decode,
            123 => &option::VendorDiscriminationString::decode,
            124 => &option::RemoteStatisticsServerIpAddress::decode,
            125 => &option::Ieee8021QVlanId::decode,
            126 => &option::Ieee8021DLayer2Priority::decode,
            127 => &option::DiffServCodePoint::decode,
            128 => &option::HttpProxy::decode,
            129 => &option::PanaAgent::decode,
            130 => &option::V4Lost::decode,
            131 => &option::CapwapAccessControllerAddresses::decode,
            132 => &option::Ipv4AddressMos::decode,
            133 => &option::Ipv4FqdnMos::decode,
            134 => &option::SipUaConfigurationServiceDomains::decode,
            135 => &option::Ipv4AddressAndsf::decode,
            136 => &option::V4SztpRedirects::decode,
            137 => &option::GeoLoc::decode,
            138 => &option::ForcerenewNonceCapable::decode,
            139 => &option::RdnssSelection::decode,
            140 => &option::V4DotsRi::decode,
            141 => &option::V4DotsAddress::decode,
            142 => &option::TftpServerAddress::decode,
            143 => &option::Etherboot::decode,
            144 => &option::GrubConfigurationPathName::decode,
            145 => &option::StatusCode::decode,
            146 => &option::BaseTime::decode,
            147 => &option::StartTimeOfState::decode,
            148 => &option::QueryStartTime::decode,
            149 => &option::QueryEndTime::decode,
            150 => &option::DhcpState::decode,
            151 => &option::DataSource::decode,
            152 => &option::V4PcpServer::decode,
            153 => &option::Polycom::decode,
            154 => &option::MudUrlV4::decode,
            155 => &option::IpTelephone::decode,
            156 => &option::PacketCableAndCableHome::decode,
            157 => &option::PxeLinuxMagic::decode,
            158 => &option::ConfigurationFile::decode,
            159 => &option::PathPrefix::decode,
            160 => &option::RebootTime::decode,
            161 => &option::BrAddresses6rd::decode,
            162 => &option::V4AccessDomain::decode,
            163 => &option::Unassigned::decode,
            164 => &option::SubnetAllocation::decode,
            165 => &option::VirtualSubnetSelection::decode,
            255 => &option::End::decode,
            _ => &option::Unknown::decode,
        };

        decode_fn(data)
    }

    #[inline]
    pub fn get_length(&self) -> usize {
        match self {
            Self::Padding(n) => *n,
            Self::MagicCookie => 4,
            Self::End => 1,
            Self::Unknown(data) => data.len(),
            _ => todo!(),
        }
    }
}
